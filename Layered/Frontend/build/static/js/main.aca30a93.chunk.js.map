{"version":3,"sources":["services/logService.js","services/httpService.js","components/Header.js","components/Layout.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["init","log","error","console","axios","interceptors","response","use","status","logger","toast","Promise","reject","get","post","put","delete","Header","className","Layout","children","Home","state","services","http","apiUrl","data","this","setState","map","service","key","id","name","Component","App","Fragment","path","component","from","exact","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kTAUe,OACXA,KAXJ,aAYIC,IANJ,SAAaC,GACTC,QAAQD,MAAMA,KCDlBE,IAAMC,aAAaC,SAASC,IAAI,MAAM,SAACL,GAOnC,OANsBA,EAAMI,UAAYJ,EAAMI,SAASE,QAAU,KAAON,EAAMI,SAASE,OAAS,MAG5FC,EAAOR,IAAI,gBAAiBC,GAC5BQ,IAAMR,MAAM,kCAETS,QAAQC,OAAOV,MAGX,OACXW,IAAKT,IAAMS,IACXC,KAAMV,IAAMU,KACZC,IAAKX,IAAMW,IACXC,OAAQZ,IAAMY,QCVHC,MARf,WACI,OACI,yBAAKC,UAAU,kBACX,wBAAIA,UAAU,eAAd,kBCOGC,MATf,YAA6B,IAAZC,EAAW,EAAXA,SACb,OACI,yBAAKF,UAAU,aACf,kBAAC,EAAD,MACKE,ICqDEC,E,4MA/CXC,MAAQ,CACJC,SAAS,I,oMANRC,EAAKX,IAAIY,iB,gBAcPC,E,EAAAA,KACPC,KAAKC,SAAS,CAAEL,SAASG,I,qIAIhB,IACFH,EAAYI,KAAKL,MAAjBC,SACP,OACA,kBAAC,EAAD,KACKA,EACD,yBAAKL,UAAU,OAEX,2BAAOA,UAAU,SACf,+BACE,4BACE,kCACA,oCACA,+BAGJ,+BACGS,KAAKL,MAAMC,SAASM,KAAI,SAAAC,GAAO,OAC9B,wBAAIC,IAAKD,EAAQE,IACf,4BAAKF,EAAQE,IACb,4BAAKF,EAAQG,aAOvB,mD,GAzCSC,aCWJC,G,6KAfb,OACC,kBAAC,IAAMC,SAAP,KACC,kBAAC,IAAD,MACA,0BAAMlB,UAAU,aACf,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOmB,KAAK,IAAIC,UAAWjB,IAD5B,UAEE,kBAAC,IAAD,CAAUkB,KAAK,IAAIC,OAAK,EAACC,GAAG,MAC7B,kBAAC,IAAD,CAAUA,GAAG,gBACJ,KACH,S,GAXMP,cCMEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvD,GACLC,QAAQD,MAAMA,EAAMwD,c","file":"static/js/main.aca30a93.chunk.js","sourcesContent":["function init() {\n\n}\n\n\n\nfunction log(error) {\n    console.error(error)\n}\n\nexport default {\n    init,\n    log\n}","import axios from 'axios';\nimport {\n    toast\n} from 'react-toastify';\nimport logger from \"./logService\";\n\naxios.interceptors.response.use(null, (error) => {\n    const expectedError = error.response && error.response.status >= 400 && error.response.status < 500;\n\n    if (!expectedError) {\n        logger.log('Logging error', error);\n        toast.error('An unexpected error occurred.');\n    }\n    return Promise.reject(error);\n});\n\nexport default {\n    get: axios.get,\n    post: axios.post,\n    put: axios.put,\n    delete: axios.delete\n};","import React from 'react'\n\nfunction Header() {\n    return (\n        <div className=\"container my-4\">\n            <h3 className=\"text-center\">GCP SERVICES</h3>\n        </div>\n    )\n}\n\nexport default Header\n    ","import React from 'react'\nimport Header from './Header'\n\nfunction Layout({children}) {\n    return (\n        <div className=\"container\">\n        <Header/>\n            {children}\n        </div>\n    )\n}\n\nexport default Layout\n","import React, { Component } from 'react';\nimport http from \"../services/httpService\"\nimport Layout from './Layout';\n\n\nconst apiUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:5000/api' : '/api'\n\nconst getServices = () => {\n  return http.get(apiUrl + '/services')\n}\n\n\nclass Home extends Component {\n    state = {\n        services:[]\n    };\n\n//   constructor() {\n//     super();\n//   }\n\n  async componentDidMount() {\n    const {data } = await getServices()\n    this.setState({ services:data });\n  }\n\n\n  render () {\n    const {services} = this.state \n    return (\n    <Layout>\n      { (services) ? (\n        <div className=\"App\">\n    \n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>ID</th>\n                  <th>Name</th>\n                  <th />\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.services.map(service => (\n                  <tr key={service.id}>\n                    <td>{service.id}</td>\n                    <td>{service.name}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n        </div>\n        ) : (\n          <div>No Data Found</div>\n        )\n      }\n    </Layout>\n    )\n  }\n}\nexport default Home;","import React, { Component } from 'react';\nimport { Route, Redirect, Switch } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport Home from './components/Home'\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<ToastContainer />\n\t\t\t\t<main className=\"container\">\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/\" component={Home} /> \ns\t\t\t\t\t\t<Redirect from=\"/\" exact to=\"/\" />\n\t\t\t\t\t\t<Redirect to=\"/not-found\" />\n\t\t\t\t\t</Switch>{' '}\n\t\t\t\t</main>{' '}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}